/**
 * @file MFKDF TOTP Factor Setup
 * @copyright Multifactor 2022 All Rights Reserved
 *
 * @description
 * Setup an TOTP factor for multi-factor key derivation
 *
 * @author Vivek Nair (https://nair.me) <vivek@nair.me>
 */
const defaults = require('../../defaults')
const crypto = require('crypto')
const xor = require('buffer-xor')
const speakeasy = require('speakeasy')

function mod (n, m) {
  return ((n % m) + m) % m
}

/**
 * Setup an MFKDF TOTP factor.
 *
 * @example
 * const TOTP = mfkdf.setup.factors.totp(...);
 *
 * @param {Object} [options] - configuration options
 * @param {string} [options.id] - unique identifier for this factor; 'totp' default
 * @param {string} [options.hash] - hash algorithm to use; sha512, sha256, or sha1 (default)
 * @param {number} [options.digits] - number of digits to use; 6 by default
 * @param {Buffer} [options.secret] - TOTP secret to use; randomly generated by default
 * @param {Buffer} [options.issuer] - otpauth issuer string; 'MFKDF' by default
 * @param {Buffer} [options.label] - otpauth label string; 'mfkdf.com' by default
 * @param {number} [options.time] - Current time for TOTP; defaults to Date.now().
 * @param {number} [options.window] - Maximum window between logins, 1 month by default
 * @param {number} [options.step] - TOTP step size, 30 by default
 * @returns {MFKDFFactor} MFKDF factor information.
 * @author Vivek Nair (https://nair.me) <vivek@nair.me>
 * @since 0.13.0
 * @async
 * @memberof setup.factors
 */
async function totp (options) {
  options = Object.assign(Object.assign({}, defaults.totp), options)

  if (typeof options.id !== 'string') throw new TypeError('id must be a string')
  if (options.id.length === 0) throw new RangeError('id cannot be empty')
  if (!Number.isInteger(options.digits)) throw new TypeError('digits must be an interger')
  if (options.digits < 6) throw new RangeError('digits must be at least 6')
  if (options.digits > 8) throw new RangeError('digits must be at most 8')
  if (!Number.isInteger(options.step)) throw new TypeError('step must be an interger')
  if (options.step < 0) throw new RangeError('step must be positive')
  if (!Number.isInteger(options.window)) throw new TypeError('window must be an interger')
  if (options.window < 0) throw new RangeError('window must be positive')
  if (!['sha1', 'sha256', 'sha512'].includes(options.hash)) throw new RangeError('unrecognized hash function')
  if (!Buffer.isBuffer(options.secret) && typeof options.secret !== 'undefined') throw new TypeError('secret must be a buffer')
  if (typeof options.time === 'undefined') options.time = Date.now()
  if (!Number.isInteger(options.time)) throw new TypeError('time must be an integer')
  if (options.time <= 0) throw new RangeError('time must be positive')

  const target = crypto.randomInt(0, 10 ** options.digits)
  const buffer = Buffer.allocUnsafe(4)
  buffer.writeUInt32BE(target, 0)

  return {
    type: 'totp',
    id: options.id,
    data: buffer,
    entropy: Math.log2(10 ** options.digits),
    params: async ({ key }) => {
      if (typeof options.secret === 'undefined') options.secret = crypto.randomBytes(Buffer.byteLength(key))

      const time = options.time
      const offsets = Buffer.allocUnsafe(4 * options.window)

      for (let i = 0; i < options.window; i++) {
        const counter = Math.floor(time / (options.step * 1000)) + i

        const code = parseInt(speakeasy.totp({
          secret: options.secret.toString('hex'),
          encoding: 'hex',
          step: options.step,
          counter: counter,
          algorithm: options.hash,
          digits: options.digits
        }))

        const offset = mod(target - code, 10 ** options.digits)

        offsets.writeUInt32BE(offset, 4 * i)
      }

      return {
        start: time,
        hash: options.hash,
        digits: options.digits,
        step: options.step,
        window: options.window,
        pad: xor(options.secret, key.slice(0, Buffer.byteLength(options.secret))).toString('base64'),
        offsets: offsets.toString('base64')
      }
    },
    output: async () => {
      return {
        scheme: 'otpauth',
        type: 'totp',
        label: options.label,
        secret: options.secret,
        issuer: options.issuer,
        algorithm: options.hash,
        digits: options.digits,
        period: options.step,
        uri: speakeasy.otpauthURL({
          secret: options.secret.toString('hex'),
          encoding: 'hex',
          label: options.label,
          type: 'totp',
          issuer: options.issuer,
          algorithm: options.hash,
          digits: options.digits,
          period: options.step
        })
      }
    }
  }
}
module.exports.totp = totp
