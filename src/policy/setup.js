/**
 * @file MFKDF Policy Setup
 * @copyright Multifactor 2022 All Rights Reserved
 *
 * @description
 * Setup MFKDF key derivation policy
 *
 * @author Vivek Nair (https://nair.me) <vivek@nair.me>
 */

const setupKey = require('../setup/key').key
const validate = require('./validate').validate

/**
  * Validate and setup a policy-based multi-factor derived key
  *
  * @example
  * const key = await mfkdf.policy.setup( ... );
  *
  * @param {MFKDFFactor} factor - base factor used to derive this key
  * @param {Object} [options] - configuration options
  * @param {string} [options.id] - unique identifier for this key; random UUIDv4 generated by default
  * @param {number} [options.size=32] - size of derived key, in bytes
  * @param {number} [options.threshold] - number of factors required to derive key; factors.length by default (all required)
  * @param {Buffer} [options.salt] - cryptographic salt; generated via secure PRG by default (recommended)
  * @param {string} [options.kdf=argon2id] - KDF algorithm to use; one of pbkdf2, bcrypt, scrypt, argon2i, argon2d, or argon2id
  * @param {number} [options.pbkdf2rounds=310000] - number of rounds to use if using pbkdf2
  * @param {string} [options.pbkdf2digest=sha256] - hash function to use if using pbkdf2; one of sha1, sha256, sha384, or sha512
  * @param {number} [options.bcryptrounds=10] - number of rounds to use if using bcrypt
  * @param {number} [options.scryptcost=16384] - iterations count (N) to use if using scrypt
  * @param {number} [options.scryptblocksize=8] - block size (r) to use if using scrypt
  * @param {number} [options.scryptparallelism=1] - parallelism factor (p) to use if using scrypt
  * @param {number} [options.argon2time=2] - iterations to use if using argon2
  * @param {number} [options.argon2mem=24576] - memory to use if using argon2
  * @param {number} [options.argon2parallelism=24576] - parallelism to use if using argon2
  * @returns {MFKDFDerivedKey} A multi-factor derived key object.
  * @author Vivek Nair (https://nair.me) <vivek@nair.me>
  * @since 0.16.0
  * @memberOf policy
  */
async function setup (factor, options) {
  const key = await setupKey([factor], options)
  if (!validate(key.policy)) throw new RangeError('policy contains duplicate ids')
  return key
}
module.exports.setup = setup
